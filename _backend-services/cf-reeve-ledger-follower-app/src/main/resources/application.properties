spring.datasource.url=${DB_URL:jdbc:postgresql://localhost:5432/postgres?currentSchema=lob_follower_service}
spring.datasource.driverClassName=${DB_DRIVER:org.postgresql.Driver}
spring.datasource.username=${DB_USERNAME:postgres}
spring.datasource.password=${DB_PASSWORD:postgres}

spring.datasource.hikari.minimum-idle=${DB_MIN_IDLE:3}
spring.datasource.hikari.maximum-pool-size=${DB_MAX_POOL_SIZE:10}
spring.datasource.hikari.idle-timeout=${DB_IDLE_TIMEOUT:30000}
#spring.jpa.properties.hibernate.default_schema=${DB_SCHEMA:lob_follower_service}
spring.jpa.database-platform=${DB_DIALECT:org.hibernate.dialect.PostgreSQLDialect}

spring.jpa.hibernate.ddl-auto=none
jpa.show.sql=${JPA_SHOW_SQL:false}

spring.flyway.locations=classpath:db/store/{vendor},classpath:db/migration/{vendor}

spring.flyway.url=${DB_URL:jdbc:postgresql://localhost:5432/postgres?currentSchema=lob_follower_service}
spring.flyway.user=${DB_USERNAME:postgres}
spring.flyway.password=${DB_PASSWORD:postgres}
spring.flyway.schemas=${DB_SCHEMA:lob_follower_service}
# baselineOnMigrate this will create a baseline version if none exists (https://flywaydb.org/documentation/configuration/parameters/baselineOnMigrate)
spring.flyway.baselineOnMigrate=true
spring.flyway.enabled=true

spring.flyway.out-of-order=true
spring.flyway.validateMigrationNaming=true

spring.banner.location=classpath:/banner.txt

# disable static content handling
spring.web.resources.add-mappings=false
# force charset in request and responses
server.servlet.encoding.force=true

cardano.network=${CARDANO_NETWORK:PREPROD}

spring.main.allow-bean-definition-overriding=true

endpoints.health.enabled=${HEALTH_ENABLED:true}
management.endpoints.web.exposure.include=${WEB_EXPOSURE_INCLUDE:health,info,prometheus,metrics,scheduledtasks,flyway}
management.endpoint.health.show-details=${MANAGEMENT_ENDPOINT_SHOW_DETAILS:always}

lob.transaction.metadata.label=${LOB_METADATA_LABEL:1447}

lob.blockfrost.url=${LOB_BLOCKFROST_URL:https://cardano-preprod.blockfrost.io/api/v0}
lob.blockfrost.api_key=${LOB_BLOCKFROST_PASSWORD}

cardano-client-lib.backend.type=${CLI_BACKEND:BLOCKFROST}

# yaci store props
store.cardano.host=${STORE_CARDANO_NODE_HOST:preprod-node.world.dev.cardano.org}
store.cardano.port=${STORE_CARDANO_NODE_PORT:30000}
# protocol magic 1 = Cardano PreProd network
store.cardano.protocol-magic=${STORE_CARDANO_NODE_PROTOCOL_MAGIC:1}

store.cardano.sync-start-blockhash=${STORE_CARDANO_SYNC_START_BLOCK_HASH:274218b4101de63d02dd38fa0ff9be75a1c146667f4aa67fe8a04e462c8c55b1}
store.cardano.sync-start-slot=${STORE_CARDANO_SYNC_START_SLOT:67868386}

apiPrefix=${API_PREFIX:/yaci-api}

# default spring profile is a development profile with an external preprod environment
spring.profiles.active=${SPRING_PROFILES_ACTIVE:dev--preprod}
cors.allowed.origins=${CORS_ALLOWED_ORIGINS:http://localhost:3000}

# 2 mins chain sync buffer
chain.sync.buffer=${CHAIN_SYNC_BUFFER:120}

chain.sync.status.check.interval=${CHAIN_SYNC_STATUS_CHECK_INTERVAL:PT30S}
chain.sync.status.check.initial.delay=${CHAIN_SYNC_STATUS_CHECK_INITIAL_DELAY:PT5S}

server.port=9090

spring.jackson.default-property-inclusion=non_null
